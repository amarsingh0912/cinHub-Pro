Design an advanced, responsive filter experience for a combined Movies & TV catalogue that fetches from TMDB (v3) via my Express proxy (never expose the API key; add server-side caching, request collapsing, and TMDB rate-limit safety), and runs in React (TypeScript) with TanStack Query and Wouter, styled with my saved Tailwind design system (dark + .light, tokens, glassmorphism). The UI uses a floating “Filters” button opening a focus-trapped side sheet on desktop and a bottom sheet on mobile, with 250 ms debounced, cancelable requests and instant result updates. Implement rich, TMDB-native facets mapped to /discover/movie and /discover/tv: Type (movie|tv), Genres (with_genres, multi-select), Keywords/Moods (with_keywords via /search/keyword), Year range (Movies → primary_release_date.gte|lte; TV → first_air_date.gte|lte + quick chips “This year”, “2010s”), Runtime (with_runtime.gte|lte), User Rating (vote_average.gte|lte) with Vote Floor (vote_count.gte), Original Language (with_original_language), Region & Release Country (region, watch_region), Streaming Providers (with_watch_providers + with_watch_monetization_types), Certification (Movies → certification_country, certification, plus include_adult), People (cast/crew autocomplete via /search/person, then with_people), Companies/Networks (with_companies, with_networks), Include/Exclude lists (with_* / without_genres / without_keywords). Support smart Sort mapped to TMDB (sort_by=popularity.desc|vote_average.desc|vote_count.desc|primary_release_date.desc|first_air_date.desc|original_title.asc|name.asc|revenue.desc), plus a global search bar hitting /search/multi and merging results into filters. Every interaction syncs to URL query params for deep links (e.g., ?type=movie&with_genres=28,53&primary_release_date.gte=2015-01-01&primary_release_date.lte=2025-12-31&with_watch_providers=8&watch_region=IN&vote_average.gte=7&sort_by=popularity.desc&page=1) and preserves state across routes/sessions. Show applied filters as removable chips with “Clear all”, live total using TMDB’s total_results, infinite scroll using page and total_pages, virtualization, prefetching next pages, and intelligent cache keys (hash the normalized TMDB query). Deliver accessible, keyboard-first components (Sheet, Facet, RangeSlider, Autocomplete, ChipGroup, PresetMenu) with ARIA labels, large touch targets, reduced-motion and high-contrast support. Handle empty/error/loading with tasteful skeletons and helpful copy (e.g., suggest loosening filters), show optimistic UI but cancel/merge rapid changes; avoid over-fetching the same page. Visually, use my Tailwind tokens (radius/spacing), sticky header with result count + sort, subtle shadows, and contextual tips. Backend contract mirrors TMDB parameters 1:1 (e.g., GET /api/tmdb/discover?endpoint=movie|tv&with_genres=…&with_keywords=…&primary_release_date.gte=…&first_air_date.gte=…&with_runtime.gte=…&vote_average.gte=…&with_people=…&with_watch_providers=…&watch_region=…&with_original_language=…&certification_country=…&certification=…&include_adult=false&without_genres=…&sort_by=…&page=…&language=en-IN&region=IN) and returns the raw TMDB payload plus fetchedAt for caching. Ship production-quality code ready to drop into my app, including unit tests for query building, URL syncing, and edge cases (e.g., TV vs Movie date fields, locale differences, empty provider availability).