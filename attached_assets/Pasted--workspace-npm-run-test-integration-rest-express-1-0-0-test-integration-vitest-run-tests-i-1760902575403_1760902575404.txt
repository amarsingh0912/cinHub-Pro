~/workspace$ npm run test:integration

> rest-express@1.0.0 test:integration
> vitest run tests/integration


 RUN  v3.2.4 /home/runner/workspace

stdout | tests/integration/reviews-api.test.ts
SendGrid configured successfully

stderr | tests/integration/reviews-api.test.ts
API key does not start with "SG.".

stdout | tests/integration/search-page.test.ts > Search Page Integration
SendGrid configured successfully

stderr | tests/integration/search-page.test.ts > Search Page Integration
API key does not start with "SG.".

stdout | tests/integration/watchlists-api.test.ts
SendGrid configured successfully

stderr | tests/integration/watchlists-api.test.ts
API key does not start with "SG.".

stdout | tests/integration/search-page.test.ts > Search Page Integration
Cloudinary configured successfully

stdout | tests/integration/reviews-api.test.ts
Cloudinary configured successfully

stdout | tests/integration/watchlists-api.test.ts
Cloudinary configured successfully

stdout | tests/integration/watchlists-api.test.ts
Cache queue worker started

stdout | tests/integration/search-page.test.ts > Search Page Integration
Cache queue worker started

stdout | tests/integration/reviews-api.test.ts
Cache queue worker started

stdout | tests/integration/search-page.test.ts > Search Page Integration
WebSocket server initialized on /ws/cache-status

stdout | tests/integration/reviews-api.test.ts > Reviews API Integration Tests
WebSocket server initialized on /ws/cache-status

stdout | tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests
WebSocket server initialized on /ws/cache-status

stderr | tests/integration/search-page.test.ts > Search Page Integration > Search Endpoint > should return search results for valid query
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:45563/api/search?query=inception

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/reviews-api.test.ts > Reviews API Integration Tests
[MSW] Warning: intercepted a request without a matching request handler:

  • POST http://127.0.0.1:37465/api/auth/signup

  • Request body: {"email":"reviewer-1760902548031@test.com","username":"reviewer1760902548031","password":"TestPass123!","firstName":"Test","lastName":"Reviewer"}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests
[MSW] Warning: intercepted a request without a matching request handler:

  • POST http://127.0.0.1:43247/api/auth/signup

  • Request body: {"email":"watchlist-1760902548049@test.com","username":"watchlist1760902548049","password":"TestPass123!","firstName":"Watch","lastName":"List"}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/reviews-api.test.ts > Reviews API Integration Tests
[MSW] Warning: intercepted a request without a matching request handler:

  • POST http://127.0.0.1:46235/api/auth/signin

  • Request body: {"identifier":"reviewer-1760902548219@test.com","password":"TestPass123!"}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests
[MSW] Warning: intercepted a request without a matching request handler:

  • POST http://127.0.0.1:46837/api/auth/signin

  • Request body: {"identifier":"watchlist-1760902548252@test.com","password":"TestPass123!"}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/search-page.test.ts > Search Page Integration > Search Endpoint > should handle empty query
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:35559/api/search?query=

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/reviews-api.test.ts > Reviews API Integration Tests > POST /api/reviews > should create a review when authenticated
[MSW] Warning: intercepted a request without a matching request handler:

  • POST http://127.0.0.1:45207/api/reviews

  • Request body: {"mediaType":"movie","mediaId":550,"rating":9,"content":"Amazing movie with great plot twist!"}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > POST /api/watchlists > should create a watchlist when authenticated
[MSW] Warning: intercepted a request without a matching request handler:

  • POST http://127.0.0.1:37529/api/watchlists

  • Request body: {"name":"Summer Movies","description":"Movies to watch this summer","isPublic":true}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/search-page.test.ts > Search Page Integration > Search Endpoint > should handle missing query parameter
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:40185/api/search

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/reviews-api.test.ts > Reviews API Integration Tests > POST /api/reviews > should reject unauthenticated requests
[MSW] Warning: intercepted a request without a matching request handler:

  • POST http://127.0.0.1:45325/api/reviews

  • Request body: {"mediaType":"movie","mediaId":550,"rating":8,"content":"Test review"}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/search-page.test.ts > Search Page Integration > Search Endpoint > should support pagination
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:45589/api/search?query=star&page=2

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > POST /api/watchlists > should reject unauthenticated requests
[MSW] Warning: intercepted a request without a matching request handler:

  • POST http://127.0.0.1:41609/api/watchlists

  • Request body: {"name":"Test Watchlist"}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/reviews-api.test.ts > Reviews API Integration Tests > POST /api/reviews > should validate rating range
[MSW] Warning: intercepted a request without a matching request handler:

  • POST http://127.0.0.1:33893/api/reviews

  • Request body: {"mediaType":"movie","mediaId":551,"rating":11,"content":"Test"}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > POST /api/watchlists > should validate required fields
[MSW] Warning: intercepted a request without a matching request handler:

  • POST http://127.0.0.1:39307/api/watchlists

  • Request body: {"description":"Missing name"}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/reviews-api.test.ts > Reviews API Integration Tests > POST /api/reviews > should require content
[MSW] Warning: intercepted a request without a matching request handler:

  • POST http://127.0.0.1:34747/api/reviews

  • Request body: {"mediaType":"movie","mediaId":552,"rating":8}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > GET /api/watchlists > should get user watchlists when authenticated
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:36635/api/watchlists

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/search-page.test.ts > Search Page Integration > Search Endpoint > should support media type filter
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:40833/api/search?query=inception&media_type=movie

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/reviews-api.test.ts > Reviews API Integration Tests > GET /api/reviews/:type/:id > should get reviews for a movie
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:40191/api/reviews/movie/550

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > GET /api/watchlists > should reject unauthenticated requests
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:43983/api/watchlists

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > GET /api/watchlists/:id > should get watchlist by ID
[MSW] Warning: intercepted a request without a matching request handler:

  • POST http://127.0.0.1:44953/api/watchlists

  • Request body: {"name":"Test Watchlist"}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/reviews-api.test.ts > Reviews API Integration Tests > GET /api/reviews/:type/:id > should get reviews for a movie
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://ep-ancient-wind-afio3cwr.c-2.us-west-2.aws.neon.tech/v2

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/search-page.test.ts > Search Page Integration > Search Endpoint > should return results with proper structure
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:46641/api/search?query=avatar

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > GET /api/watchlists/:id > should get watchlist by ID
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:46631/api/watchlists/undefined

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > GET /api/watchlists/:id > should return 404 for non-existent watchlist
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:39863/api/watchlists/nonexistent-id

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/search-page.test.ts > Search Page Integration > Search Filtering > should filter by movies only
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:35741/api/search?query=batman&media_type=movie

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > POST /api/watchlists/:id/items > should add movie to watchlist
[MSW] Warning: intercepted a request without a matching request handler:

  • POST http://127.0.0.1:42017/api/watchlists

  • Request body: {"name":"Test Watchlist"}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > POST /api/watchlists/:id/items > should add movie to watchlist
[MSW] Warning: intercepted a request without a matching request handler:

  • POST http://127.0.0.1:38761/api/watchlists/undefined/items

  • Request body: {"mediaType":"movie","mediaId":550,"notes":"Must watch this classic!"}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > POST /api/watchlists/:id/items > should add TV show to watchlist
[MSW] Warning: intercepted a request without a matching request handler:

  • POST http://127.0.0.1:45401/api/watchlists/undefined/items

  • Request body: {"mediaType":"tv","mediaId":1396}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/search-page.test.ts > Search Page Integration > Search Filtering > should filter by TV shows only
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:37433/api/search?query=breaking&media_type=tv

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > POST /api/watchlists/:id/items > should validate media type
[MSW] Warning: intercepted a request without a matching request handler:

  • POST http://127.0.0.1:43955/api/watchlists/undefined/items

  • Request body: {"mediaType":"invalid","mediaId":550}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > DELETE /api/watchlists/:id/items > should remove item from watchlist
[MSW] Warning: intercepted a request without a matching request handler:

  • POST http://127.0.0.1:40261/api/watchlists/undefined/items

  • Request body: {"mediaType":"movie","mediaId":600}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/search-page.test.ts > Search Page Integration > Search Filtering > should filter by people only
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:40207/api/search?query=leonardo&media_type=person

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > DELETE /api/watchlists/:id/items > should remove item from watchlist
[MSW] Warning: intercepted a request without a matching request handler:

  • DELETE http://127.0.0.1:38147/api/watchlists/undefined/items?mediaType=movie&mediaId=600

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/search-page.test.ts > Search Page Integration > Search Filtering > should return all types without filter
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:38717/api/search?query=star

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > DELETE /api/watchlists/:id > should delete watchlist
[MSW] Warning: intercepted a request without a matching request handler:

  • POST http://127.0.0.1:35091/api/watchlists

  • Request body: {"name":"Watchlist to Delete"}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > DELETE /api/watchlists/:id > should delete watchlist
[MSW] Warning: intercepted a request without a matching request handler:

  • DELETE http://127.0.0.1:42421/api/watchlists/undefined

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

 ❯ tests/integration/watchlists-api.test.ts (12 tests | 10 failed) 1306ms
   × Watchlists API Integration Tests > POST /api/watchlists > should create a watchlist when authenticated 65ms
     → expected 201 "Created", got 403 "Forbidden"
   × Watchlists API Integration Tests > POST /api/watchlists > should reject unauthenticated requests 86ms
     → expected 401 "Unauthorized", got 403 "Forbidden"
   × Watchlists API Integration Tests > POST /api/watchlists > should validate required fields 53ms
     → expected 400 "Bad Request", got 403 "Forbidden"
   × Watchlists API Integration Tests > GET /api/watchlists > should get user watchlists when authenticated 57ms
     → expected 200 "OK", got 401 "Unauthorized"
   ✓ Watchlists API Integration Tests > GET /api/watchlists > should reject unauthenticated requests 44ms
   × Watchlists API Integration Tests > GET /api/watchlists/:id > should get watchlist by ID 109ms
     → expected 200 "OK", got 404 "Not Found"
   ✓ Watchlists API Integration Tests > GET /api/watchlists/:id > should return 404 for non-existent watchlist 55ms
   × Watchlists API Integration Tests > POST /api/watchlists/:id/items > should add movie to watchlist 95ms
     → expected 201 "Created", got 403 "Forbidden"
   × Watchlists API Integration Tests > POST /api/watchlists/:id/items > should add TV show to watchlist 59ms
     → expected 201 "Created", got 403 "Forbidden"
   × Watchlists API Integration Tests > POST /api/watchlists/:id/items > should validate media type 82ms
     → expected 400 "Bad Request", got 403 "Forbidden"
   × Watchlists API Integration Tests > DELETE /api/watchlists/:id/items > should remove item from watchlist 126ms
     → expected 204 "No Content", got 403 "Forbidden"
   × Watchlists API Integration Tests > DELETE /api/watchlists/:id > should delete watchlist 104ms
     → expected 204 "No Content", got 403 "Forbidden"
stderr | tests/integration/search-page.test.ts > Search Page Integration > Search Sorting > should support sorting by popularity
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:43087/api/search?query=action&sort_by=popularity.desc

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/search-page.test.ts > Search Page Integration > Search Sorting > should support sorting by vote average
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:34343/api/search?query=drama&sort_by=vote_average.desc

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/search-page.test.ts > Search Page Integration > Search Validation > should handle very long queries
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:44839/api/search?query=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/reviews-api.test.ts > Reviews API Integration Tests > GET /api/reviews/:type/:id > should get reviews for a movie
Error fetching media reviews: error: The endpoint has been disabled. Enable it using Neon API and retry.
    at file:///home/runner/workspace/node_modules/@neondatabase/serverless/index.mjs:1345:74
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
    at NeonPreparedQuery.execute (file:///home/runner/workspace/node_modules/src/neon-serverless/session.ts:102:18)
    at DatabaseStorage.getMediaReviews (/home/runner/workspace/server/storage.ts:388:12)
    at /home/runner/workspace/server/routes.ts:2575:27 {
  length: 88,
  severity: 'ERROR',
  code: 'XX000',
  detail: undefined,
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: undefined,
  line: undefined,
  routine: undefined
}

stderr | tests/integration/reviews-api.test.ts > Reviews API Integration Tests > GET /api/reviews/:type/:id > should return empty array for media with no reviews
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:36073/api/reviews/movie/999999

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/reviews-api.test.ts > Reviews API Integration Tests > GET /api/reviews/:type/:id > should return empty array for media with no reviews
[MSW] Warning: intercepted a request without a matching request handler:

  • GET https://ep-ancient-wind-afio3cwr.c-2.us-west-2.aws.neon.tech/v2

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/search-page.test.ts > Search Page Integration > Search Validation > should handle special characters in query
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:46857/api/search?query=test%21%40%23%24%25%5E%26%2A%28%29

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/search-page.test.ts > Search Page Integration > Search Validation > should handle unicode characters
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:38769/api/search?query=%E7%94%B5%E5%BD%B1

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/search-page.test.ts > Search Page Integration > Search Validation > should validate page number
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:34761/api/search?query=test&page=-1

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/search-page.test.ts > Search Page Integration > Search Validation > should validate media type
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:40119/api/search?query=test&media_type=invalid

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/search-page.test.ts > Search Page Integration > Search Performance > should respond within acceptable time
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:40479/api/search?query=marvel

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/search-page.test.ts > Search Page Integration > Search Performance > should handle concurrent searches
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:35681/api/search?query=test0

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:40001/api/search?query=test1

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:40101/api/search?query=test2

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:33935/api/search?query=test3

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:40339/api/search?query=test4

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stdout | tests/integration/movies-api.test.ts
SendGrid configured successfully

stderr | tests/integration/movies-api.test.ts
API key does not start with "SG.".

stderr | tests/integration/reviews-api.test.ts > Reviews API Integration Tests > GET /api/reviews/:type/:id > should return empty array for media with no reviews
Error fetching media reviews: error: The endpoint has been disabled. Enable it using Neon API and retry.
    at file:///home/runner/workspace/node_modules/@neondatabase/serverless/index.mjs:1345:74
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
    at NeonPreparedQuery.execute (file:///home/runner/workspace/node_modules/src/neon-serverless/session.ts:102:18)
    at DatabaseStorage.getMediaReviews (/home/runner/workspace/server/storage.ts:388:12)
    at /home/runner/workspace/server/routes.ts:2575:27 {
  length: 88,
  severity: 'ERROR',
  code: 'XX000',
  detail: undefined,
  hint: undefined,
  position: undefined,
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: undefined,
  line: undefined,
  routine: undefined
}

stdout | tests/integration/movies-api.test.ts
Cloudinary configured successfully

stdout | tests/integration/movies-api.test.ts
Cache queue worker started

stderr | tests/integration/search-page.test.ts > Search Page Integration > Search Error Handling > should handle TMDB API errors gracefully
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:38451/api/search?query=test&page=9999

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/reviews-api.test.ts > Reviews API Integration Tests > PUT /api/reviews/:id > should update own review
[MSW] Warning: intercepted a request without a matching request handler:

  • POST http://127.0.0.1:41231/api/reviews

  • Request body: {"mediaType":"movie","mediaId":600,"rating":8,"content":"Original content"}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stdout | tests/integration/movies-api.test.ts > Movies API Integration Tests
WebSocket server initialized on /ws/cache-status

stderr | tests/integration/reviews-api.test.ts > Reviews API Integration Tests > PUT /api/reviews/:id > should update own review
[MSW] Warning: intercepted a request without a matching request handler:

  • PUT http://127.0.0.1:35387/api/reviews/undefined

  • Request body: {"rating":9,"content":"Updated content"}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/search-page.test.ts > Search Page Integration > Search Error Handling > should return proper error format
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:38791/api/search?query=&page=0

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/reviews-api.test.ts > Reviews API Integration Tests > DELETE /api/reviews/:id > should delete own review
[MSW] Warning: intercepted a request without a matching request handler:

  • POST http://127.0.0.1:38055/api/reviews

  • Request body: {"mediaType":"movie","mediaId":700,"rating":7,"content":"To be deleted"}

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

 ❯ tests/integration/search-page.test.ts (21 tests | 2 failed) 3702ms
   ✓ Search Page Integration > Search Endpoint > should return search results for valid query 281ms
   ✓ Search Page Integration > Search Endpoint > should handle empty query 117ms
   ✓ Search Page Integration > Search Endpoint > should handle missing query parameter 74ms
   × Search Page Integration > Search Endpoint > should support pagination 145ms
     → expected 1 to be 2 // Object.is equality
   ✓ Search Page Integration > Search Endpoint > should support media type filter 137ms
   ✓ Search Page Integration > Search Endpoint > should return results with proper structure 101ms
   ✓ Search Page Integration > Search Filtering > should filter by movies only 104ms
   ✓ Search Page Integration > Search Filtering > should filter by TV shows only 161ms
   ✓ Search Page Integration > Search Filtering > should filter by people only 101ms
   × Search Page Integration > Search Filtering > should return all types without filter 105ms
     → expected 0 to be greater than or equal to 1
   ✓ Search Page Integration > Search Sorting > should support sorting by popularity 99ms
   ✓ Search Page Integration > Search Sorting > should support sorting by vote average 80ms
   ✓ Search Page Integration > Search Validation > should handle very long queries  408ms
   ✓ Search Page Integration > Search Validation > should handle special characters in query 140ms
   ✓ Search Page Integration > Search Validation > should handle unicode characters 123ms
   ✓ Search Page Integration > Search Validation > should validate page number 117ms
   ✓ Search Page Integration > Search Validation > should validate media type 92ms
   ✓ Search Page Integration > Search Performance > should respond within acceptable time 88ms
   ✓ Search Page Integration > Search Performance > should handle concurrent searches  321ms
   ✓ Search Page Integration > Search Error Handling > should handle TMDB API errors gracefully 78ms
   ✓ Search Page Integration > Search Error Handling > should return proper error format 41ms
stderr | tests/integration/movies-api.test.ts > Movies API Integration Tests > GET /api/tmdb/movie/:id > should return movie details for valid ID
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:40415/api/tmdb/movie/550

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/reviews-api.test.ts > Reviews API Integration Tests > DELETE /api/reviews/:id > should delete own review
[MSW] Warning: intercepted a request without a matching request handler:

  • DELETE http://127.0.0.1:41993/api/reviews/undefined

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

 ❯ tests/integration/reviews-api.test.ts (8 tests | 8 failed) 2950ms
   × Reviews API Integration Tests > POST /api/reviews > should create a review when authenticated 72ms
     → expected 201 "Created", got 403 "Forbidden"
   × Reviews API Integration Tests > POST /api/reviews > should reject unauthenticated requests 72ms
     → expected 401 "Unauthorized", got 403 "Forbidden"
   × Reviews API Integration Tests > POST /api/reviews > should validate rating range 59ms
     → expected 400 "Bad Request", got 403 "Forbidden"
   × Reviews API Integration Tests > POST /api/reviews > should require content 57ms
     → expected 400 "Bad Request", got 403 "Forbidden"
   × Reviews API Integration Tests > GET /api/reviews/:type/:id > should get reviews for a movie 1141ms
     → expected 200 "OK", got 500 "Internal Server Error"
   × Reviews API Integration Tests > GET /api/reviews/:type/:id > should return empty array for media with no reviews 1018ms
     → expected 200 "OK", got 500 "Internal Server Error"
   × Reviews API Integration Tests > PUT /api/reviews/:id > should update own review 71ms
     → expected 200 "OK", got 403 "Forbidden"
   × Reviews API Integration Tests > DELETE /api/reviews/:id > should delete own review 109ms
     → expected 204 "No Content", got 403 "Forbidden"
stderr | tests/integration/movies-api.test.ts > Movies API Integration Tests > GET /api/tmdb/movie/:id > should return 404 for non-existent movie
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:34797/api/tmdb/movie/9999999

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/movies-api.test.ts > Movies API Integration Tests > GET /api/tmdb/movie/:id > should cache movie data
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:43575/api/tmdb/movie/551

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/movies-api.test.ts > Movies API Integration Tests > GET /api/tmdb/movie/category/:category > should return trending movies
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:34113/api/tmdb/movie/category/trending

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/movies-api.test.ts > Movies API Integration Tests > GET /api/tmdb/movie/category/:category > should return popular movies
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:45297/api/tmdb/movie/category/popular

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/movies-api.test.ts > Movies API Integration Tests > GET /api/tmdb/movie/category/:category > should support pagination
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:38027/api/tmdb/movie/category/popular?page=2

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/movies-api.test.ts > Movies API Integration Tests > GET /api/tmdb/discover/movie > should discover movies with filters
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:39285/api/tmdb/discover/movie?with_genres=28&vote_average.gte=7

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/movies-api.test.ts > Movies API Integration Tests > GET /api/tmdb/discover/movie > should support multiple genres
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:40113/api/tmdb/discover/movie?with_genres=28%2C12

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/movies-api.test.ts > Movies API Integration Tests > GET /api/tmdb/search/movie > should search movies by query
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:36419/api/tmdb/search/movie?query=fight%20club

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/movies-api.test.ts > Movies API Integration Tests > GET /api/tmdb/search/movie > should return empty results for non-existent movies
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:33005/api/tmdb/search/movie?query=xyznonexistent123

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/movies-api.test.ts > Movies API Integration Tests > Error Handling > should handle invalid movie ID format
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:36371/api/tmdb/movie/invalid

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/movies-api.test.ts > Movies API Integration Tests > Error Handling > should require search query parameter
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:39967/api/tmdb/search/movie

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

 ❯ tests/integration/movies-api.test.ts (12 tests | 11 failed) 931ms
   × Movies API Integration Tests > GET /api/tmdb/movie/:id > should return movie details for valid ID 144ms
     → expected 200 "OK", got 404 "Not Found"
   ✓ Movies API Integration Tests > GET /api/tmdb/movie/:id > should return 404 for non-existent movie 79ms
   × Movies API Integration Tests > GET /api/tmdb/movie/:id > should cache movie data 73ms
     → expected 200 "OK", got 404 "Not Found"
   × Movies API Integration Tests > GET /api/tmdb/movie/category/:category > should return trending movies 88ms
     → expected 200 "OK", got 404 "Not Found"
   × Movies API Integration Tests > GET /api/tmdb/movie/category/:category > should return popular movies 100ms
     → expected 200 "OK", got 404 "Not Found"
   × Movies API Integration Tests > GET /api/tmdb/movie/category/:category > should support pagination 89ms
     → expected 200 "OK", got 404 "Not Found"
   × Movies API Integration Tests > GET /api/tmdb/discover/movie > should discover movies with filters 75ms
     → expected 200 "OK", got 404 "Not Found"
   × Movies API Integration Tests > GET /api/tmdb/discover/movie > should support multiple genres 75ms
     → expected 200 "OK", got 404 "Not Found"
   × Movies API Integration Tests > GET /api/tmdb/search/movie > should search movies by query 59ms
     → expected 200 "OK", got 404 "Not Found"
   × Movies API Integration Tests > GET /api/tmdb/search/movie > should return empty results for non-existent movies 45ms
     → expected 200 "OK", got 404 "Not Found"
   × Movies API Integration Tests > Error Handling > should handle invalid movie ID format 50ms
     → expected 400 "Bad Request", got 404 "Not Found"
   × Movies API Integration Tests > Error Handling > should require search query parameter 29ms
     → expected 400 "Bad Request", got 404 "Not Found"
stdout | tests/integration/tmdb-api.test.ts
SendGrid configured successfully

stderr | tests/integration/tmdb-api.test.ts
API key does not start with "SG.".

stdout | tests/integration/tmdb-api.test.ts
Cloudinary configured successfully

stdout | tests/integration/landing-page.test.ts > Landing Page Integration
SendGrid configured successfully

stderr | tests/integration/landing-page.test.ts > Landing Page Integration
API key does not start with "SG.".

stdout | tests/integration/landing-page.test.ts > Landing Page Integration
Cloudinary configured successfully

stdout | tests/integration/landing-page.test.ts > Landing Page Integration
Cache queue worker started

stdout | tests/integration/landing-page.test.ts > Landing Page Integration
WebSocket server initialized on /ws/cache-status

stderr | tests/integration/landing-page.test.ts > Landing Page Integration > GET / > should return 200 status code
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:36839/

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/landing-page.test.ts > Landing Page Integration > GET / > should serve HTML content
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:45041/

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/landing-page.test.ts > Landing Page Integration > GET / > should include app meta tags
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:46643/

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/landing-page.test.ts > Landing Page Integration > GET / > should include app scripts
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:46251/

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stdout | tests/integration/avatar-upload.test.ts
Cloudinary configured successfully

stderr | tests/integration/landing-page.test.ts > Landing Page Integration > GET / > should have proper charset
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:34317/

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

 ✓ tests/integration/avatar-upload.test.ts (8 tests) 21ms
stderr | tests/integration/landing-page.test.ts > Landing Page Integration > SEO > should have title tag
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:34827/

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/landing-page.test.ts > Landing Page Integration > SEO > should have meta description
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:34405/

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/landing-page.test.ts > Landing Page Integration > SEO > should have Open Graph tags
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:42121/

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/landing-page.test.ts > Landing Page Integration > SEO > should have viewport meta tag
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:36737/

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/landing-page.test.ts > Landing Page Integration > Security Headers > should set X-Content-Type-Options header
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:46081/

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/landing-page.test.ts > Landing Page Integration > Security Headers > should set X-Frame-Options header
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:34265/

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/landing-page.test.ts > Landing Page Integration > Security Headers > should set Content-Security-Policy
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:36699/

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/landing-page.test.ts > Landing Page Integration > Caching > should not cache HTML pages
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:43677/

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

stderr | tests/integration/landing-page.test.ts > Landing Page Integration > Compression > should support gzip compression
[MSW] Warning: intercepted a request without a matching request handler:

  • GET http://127.0.0.1:34465/

If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/http/intercepting-requests

 ✓ tests/integration/landing-page.test.ts (19 tests) 1101ms

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ Failed Suites 8 ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯

 FAIL  tests/integration/activity-history-api.test.ts [ tests/integration/activity-history-api.test.ts ]
 FAIL  tests/integration/admin-api.test.ts [ tests/integration/admin-api.test.ts ]
 FAIL  tests/integration/auth-api.test.ts [ tests/integration/auth-api.test.ts ]
 FAIL  tests/integration/cloudinary-service.test.ts [ tests/integration/cloudinary-service.test.ts ]
 FAIL  tests/integration/preferences-api.test.ts [ tests/integration/preferences-api.test.ts ]
 FAIL  tests/integration/websocket-integration.test.ts [ tests/integration/websocket-integration.test.ts ]
Error: [vitest] No "default" export is defined on the "@sendgrid/mail" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

vi.mock(import("@sendgrid/mail"), async (importOriginal) => {
  const actual = await importOriginal()
  return {
    ...actual,
    // your mocked methods
  }
})

 ❯ server/services/otpService.ts:6:3
      4| // Initialize SendGrid
      5| if (process.env.SENDGRID_API_KEY) {
      6|   sgMail.setApiKey(process.env.SENDGRID_API_KEY);
       |   ^
      7|   console.log("SendGrid configured successfully");
      8| } else {
 ❯ server/routes.ts:15:32

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/39]⎯

 FAIL  tests/integration/tmdb-api.test.ts [ tests/integration/tmdb-api.test.ts ]
Error: [vitest] There was an error when mocking a module. If you are using "vi.mock" factory, make sure there are no top level variables inside, since this call is hoisted to top of the file. Read more: https://vitest.dev/api/vi.html#vi-mock
 ❯ server/routes.ts:17:32
     17|   signIn,
     18|   signInWithTokens,
     19|   refreshAccessToken,
       |  ^
     20|   logoutWithToken,
     21|   hashPassword,

Caused by: ReferenceError: Cannot access '__vi_import_3__' before initialization
 ❯ tests/integration/tmdb-api.test.ts:18:43
 ❯ server/routes.ts:17:32

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[2/39]⎯

 FAIL  tests/integration/user-collections.test.ts [ tests/integration/user-collections.test.ts ]
Error: [vitest] No "default" export is defined on the "@sendgrid/mail" mock. Did you forget to return it from "vi.mock"?
If you need to partially mock a module, you can use "importOriginal" helper inside:

vi.mock(import("@sendgrid/mail"), async (importOriginal) => {
  const actual = await importOriginal()
  return {
    ...actual,
    // your mocked methods
  }
})

 ❯ server/services/otpService.ts:6:3
      4| // Initialize SendGrid
      5| if (process.env.SENDGRID_API_KEY) {
      6|   sgMail.setApiKey(process.env.SENDGRID_API_KEY);
       |   ^
      7|   console.log("SendGrid configured successfully");
      8| } else {
 ❯ server/routes.ts:15:32

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[3/39]⎯


⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ Failed Tests 31 ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯

 FAIL  tests/integration/movies-api.test.ts > Movies API Integration Tests > GET /api/tmdb/movie/:id > should return movie details for valid ID
Error: expected 200 "OK", got 404 "Not Found"
 ❯ tests/integration/movies-api.test.ts:35:10
     33|       const response = await request(app)
     34|         .get('/api/tmdb/movie/550') // Fight Club
     35|         .expect(200);
       |          ^
     36| 
     37|       expect(response.body).toHaveProperty('id', 550);
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[4/39]⎯

 FAIL  tests/integration/movies-api.test.ts > Movies API Integration Tests > GET /api/tmdb/movie/:id > should cache movie data
Error: expected 200 "OK", got 404 "Not Found"
 ❯ tests/integration/movies-api.test.ts:51:10
     49|       const response1 = await request(app)
     50|         .get('/api/tmdb/movie/551')
     51|         .expect(200);
       |          ^
     52| 
     53|       const response2 = await request(app)
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[5/39]⎯

 FAIL  tests/integration/movies-api.test.ts > Movies API Integration Tests > GET /api/tmdb/movie/category/:category > should return trending movies
Error: expected 200 "OK", got 404 "Not Found"
 ❯ tests/integration/movies-api.test.ts:65:10
     63|       const response = await request(app)
     64|         .get('/api/tmdb/movie/category/trending')
     65|         .expect(200);
       |          ^
     66| 
     67|       expect(response.body).toHaveProperty('results');
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[6/39]⎯

 FAIL  tests/integration/movies-api.test.ts > Movies API Integration Tests > GET /api/tmdb/movie/category/:category > should return popular movies
Error: expected 200 "OK", got 404 "Not Found"
 ❯ tests/integration/movies-api.test.ts:74:10
     72|       const response = await request(app)
     73|         .get('/api/tmdb/movie/category/popular')
     74|         .expect(200);
       |          ^
     75| 
     76|       expect(response.body).toHaveProperty('results');
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[7/39]⎯

 FAIL  tests/integration/movies-api.test.ts > Movies API Integration Tests > GET /api/tmdb/movie/category/:category > should support pagination
Error: expected 200 "OK", got 404 "Not Found"
 ❯ tests/integration/movies-api.test.ts:84:10
     82|         .get('/api/tmdb/movie/category/popular')
     83|         .query({ page: 2 })
     84|         .expect(200);
       |          ^
     85| 
     86|       expect(response.body).toHaveProperty('page', 2);
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[8/39]⎯

 FAIL  tests/integration/movies-api.test.ts > Movies API Integration Tests > GET /api/tmdb/discover/movie > should discover movies with filters
Error: expected 200 "OK", got 404 "Not Found"
 ❯ tests/integration/movies-api.test.ts:98:10
     96|           'vote_average.gte': 7,
     97|         })
     98|         .expect(200);
       |          ^
     99| 
    100|       expect(response.body).toHaveProperty('results');
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[9/39]⎯

 FAIL  tests/integration/movies-api.test.ts > Movies API Integration Tests > GET /api/tmdb/discover/movie > should support multiple genres
Error: expected 200 "OK", got 404 "Not Found"
 ❯ tests/integration/movies-api.test.ts:109:10
    107|           with_genres: '28,12', // Action, Adventure
    108|         })
    109|         .expect(200);
       |          ^
    110| 
    111|       expect(response.body.results).toBeDefined();
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[10/39]⎯

 FAIL  tests/integration/movies-api.test.ts > Movies API Integration Tests > GET /api/tmdb/search/movie > should search movies by query
Error: expected 200 "OK", got 404 "Not Found"
 ❯ tests/integration/movies-api.test.ts:120:10
    118|         .get('/api/tmdb/search/movie')
    119|         .query({ query: 'fight club' })
    120|         .expect(200);
       |          ^
    121| 
    122|       expect(response.body).toHaveProperty('results');
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[11/39]⎯

 FAIL  tests/integration/movies-api.test.ts > Movies API Integration Tests > GET /api/tmdb/search/movie > should return empty results for non-existent movies
Error: expected 200 "OK", got 404 "Not Found"
 ❯ tests/integration/movies-api.test.ts:132:10
    130|         .get('/api/tmdb/search/movie')
    131|         .query({ query: 'xyznonexistent123' })
    132|         .expect(200);
       |          ^
    133| 
    134|       expect(response.body.results).toEqual([]);
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[12/39]⎯

 FAIL  tests/integration/movies-api.test.ts > Movies API Integration Tests > Error Handling > should handle invalid movie ID format
Error: expected 400 "Bad Request", got 404 "Not Found"
 ❯ tests/integration/movies-api.test.ts:142:10
    140|       await request(app)
    141|         .get('/api/tmdb/movie/invalid')
    142|         .expect(400);
       |          ^
    143|     });
    144| 
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[13/39]⎯

 FAIL  tests/integration/movies-api.test.ts > Movies API Integration Tests > Error Handling > should require search query parameter
Error: expected 400 "Bad Request", got 404 "Not Found"
 ❯ tests/integration/movies-api.test.ts:148:10
    146|       await request(app)
    147|         .get('/api/tmdb/search/movie')
    148|         .expect(400);
       |          ^
    149|     });
    150|   });
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[14/39]⎯

 FAIL  tests/integration/reviews-api.test.ts > Reviews API Integration Tests > POST /api/reviews > should create a review when authenticated
Error: expected 201 "Created", got 403 "Forbidden"
 ❯ tests/integration/reviews-api.test.ts:59:10
     57|           content: 'Amazing movie with great plot twist!',
     58|         })
     59|         .expect(201);
       |          ^
     60| 
     61|       expect(response.body).toHaveProperty('id');
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[15/39]⎯

 FAIL  tests/integration/reviews-api.test.ts > Reviews API Integration Tests > POST /api/reviews > should reject unauthenticated requests
Error: expected 401 "Unauthorized", got 403 "Forbidden"
 ❯ tests/integration/reviews-api.test.ts:76:10
     74|           content: 'Test review',
     75|         })
     76|         .expect(401);
       |          ^
     77|     });
     78| 
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[16/39]⎯

 FAIL  tests/integration/reviews-api.test.ts > Reviews API Integration Tests > POST /api/reviews > should validate rating range
Error: expected 400 "Bad Request", got 403 "Forbidden"
 ❯ tests/integration/reviews-api.test.ts:89:10
     87|           content: 'Test',
     88|         })
     89|         .expect(400);
       |          ^
     90|     });
     91| 
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[17/39]⎯

 FAIL  tests/integration/reviews-api.test.ts > Reviews API Integration Tests > POST /api/reviews > should require content
Error: expected 400 "Bad Request", got 403 "Forbidden"
 ❯ tests/integration/reviews-api.test.ts:101:10
     99|           rating: 8,
    100|         })
    101|         .expect(400);
       |          ^
    102|     });
    103|   });
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[18/39]⎯

 FAIL  tests/integration/reviews-api.test.ts > Reviews API Integration Tests > GET /api/reviews/:type/:id > should get reviews for a movie
Error: expected 200 "OK", got 500 "Internal Server Error"
 ❯ tests/integration/reviews-api.test.ts:109:10
    107|       const response = await request(app)
    108|         .get('/api/reviews/movie/550')
    109|         .expect(200);
       |          ^
    110| 
    111|       expect(Array.isArray(response.body)).toBe(true);
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[19/39]⎯

 FAIL  tests/integration/reviews-api.test.ts > Reviews API Integration Tests > GET /api/reviews/:type/:id > should return empty array for media with no reviews
Error: expected 200 "OK", got 500 "Internal Server Error"
 ❯ tests/integration/reviews-api.test.ts:117:10
    115|       const response = await request(app)
    116|         .get('/api/reviews/movie/999999')
    117|         .expect(200);
       |          ^
    118| 
    119|       expect(response.body).toEqual([]);
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[20/39]⎯

 FAIL  tests/integration/reviews-api.test.ts > Reviews API Integration Tests > PUT /api/reviews/:id > should update own review
Error: expected 200 "OK", got 403 "Forbidden"
 ❯ tests/integration/reviews-api.test.ts:146:10
    144|           content: 'Updated content',
    145|         })
    146|         .expect(200);
       |          ^
    147| 
    148|       expect(response.body.rating).toBe(9);
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[21/39]⎯

 FAIL  tests/integration/reviews-api.test.ts > Reviews API Integration Tests > DELETE /api/reviews/:id > should delete own review
Error: expected 204 "No Content", got 403 "Forbidden"
 ❯ tests/integration/reviews-api.test.ts:171:10
    169|         .delete(`/api/reviews/${deleteReviewId}`)
    170|         .set('Authorization', `Bearer ${authToken}`)
    171|         .expect(204);
       |          ^
    172|     });
    173|   });
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[22/39]⎯

 FAIL  tests/integration/search-page.test.ts > Search Page Integration > Search Endpoint > should support pagination
AssertionError: expected 1 to be 2 // Object.is equality

- Expected
+ Received

- 2
+ 1

 ❯ tests/integration/search-page.test.ts:56:34
     54| 
     55|       expect(response.body).toHaveProperty('page');
     56|       expect(response.body.page).toBe(2);
       |                                  ^
     57|     });
     58| 

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[23/39]⎯

 FAIL  tests/integration/search-page.test.ts > Search Page Integration > Search Filtering > should return all types without filter
AssertionError: expected 0 to be greater than or equal to 1
 ❯ tests/integration/search-page.test.ts:127:31
    125|       );
    126|       
    127|       expect(mediaTypes.size).toBeGreaterThanOrEqual(1);
       |                               ^
    128|     });
    129|   });

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[24/39]⎯

 FAIL  tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > POST /api/watchlists > should create a watchlist when authenticated
Error: expected 201 "Created", got 403 "Forbidden"
 ❯ tests/integration/watchlists-api.test.ts:57:10
     55|           isPublic: true,
     56|         })
     57|         .expect(201);
       |          ^
     58| 
     59|       expect(response.body).toHaveProperty('id');
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[25/39]⎯

 FAIL  tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > POST /api/watchlists > should reject unauthenticated requests
Error: expected 401 "Unauthorized", got 403 "Forbidden"
 ❯ tests/integration/watchlists-api.test.ts:71:10
     69|           name: 'Test Watchlist',
     70|         })
     71|         .expect(401);
       |          ^
     72|     });
     73| 
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[26/39]⎯

 FAIL  tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > POST /api/watchlists > should validate required fields
Error: expected 400 "Bad Request", got 403 "Forbidden"
 ❯ tests/integration/watchlists-api.test.ts:81:10
     79|           description: 'Missing name',
     80|         })
     81|         .expect(400);
       |          ^
     82|     });
     83|   });
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[27/39]⎯

 FAIL  tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > GET /api/watchlists > should get user watchlists when authenticated
Error: expected 200 "OK", got 401 "Unauthorized"
 ❯ tests/integration/watchlists-api.test.ts:90:10
     88|         .get('/api/watchlists')
     89|         .set('Authorization', `Bearer ${authToken}`)
     90|         .expect(200);
       |          ^
     91| 
     92|       expect(Array.isArray(response.body)).toBe(true);
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[28/39]⎯

 FAIL  tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > GET /api/watchlists/:id > should get watchlist by ID
Error: expected 200 "OK", got 404 "Not Found"
 ❯ tests/integration/watchlists-api.test.ts:118:10
    116|         .get(`/api/watchlists/${watchlistId}`)
    117|         .set('Authorization', `Bearer ${authToken}`)
    118|         .expect(200);
       |          ^
    119| 
    120|       expect(response.body).toHaveProperty('id', watchlistId);
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[29/39]⎯

 FAIL  tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > POST /api/watchlists/:id/items > should add movie to watchlist
Error: expected 201 "Created", got 403 "Forbidden"
 ❯ tests/integration/watchlists-api.test.ts:151:10
    149|           notes: 'Must watch this classic!',
    150|         })
    151|         .expect(201);
       |          ^
    152| 
    153|       expect(response.body).toHaveProperty('mediaType', 'movie');
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[30/39]⎯

 FAIL  tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > POST /api/watchlists/:id/items > should add TV show to watchlist
Error: expected 201 "Created", got 403 "Forbidden"
 ❯ tests/integration/watchlists-api.test.ts:165:10
    163|           mediaId: 1396,
    164|         })
    165|         .expect(201);
       |          ^
    166| 
    167|       expect(response.body.mediaType).toBe('tv');
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[31/39]⎯

 FAIL  tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > POST /api/watchlists/:id/items > should validate media type
Error: expected 400 "Bad Request", got 403 "Forbidden"
 ❯ tests/integration/watchlists-api.test.ts:178:10
    176|           mediaId: 550,
    177|         })
    178|         .expect(400);
       |          ^
    179|     });
    180|   });
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[32/39]⎯

 FAIL  tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > DELETE /api/watchlists/:id/items > should remove item from watchlist
Error: expected 204 "No Content", got 403 "Forbidden"
 ❯ tests/integration/watchlists-api.test.ts:198:10
    196|         .set('Authorization', `Bearer ${authToken}`)
    197|         .query({ mediaType: 'movie', mediaId: 600 })
    198|         .expect(204);
       |          ^
    199|     });
    200|   });
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[33/39]⎯

 FAIL  tests/integration/watchlists-api.test.ts > Watchlists API Integration Tests > DELETE /api/watchlists/:id > should delete watchlist
Error: expected 204 "No Content", got 403 "Forbidden"
 ❯ tests/integration/watchlists-api.test.ts:217:10
    215|         .delete(`/api/watchlists/${deleteId}`)
    216|         .set('Authorization', `Bearer ${authToken}`)
    217|         .expect(204);
       |          ^
    218|     });
    219|   });
 ❯ Test._assertStatus node_modules/supertest/lib/test.js:309:14
 ❯ node_modules/supertest/lib/test.js:365:13
 ❯ Test._assertFunction node_modules/supertest/lib/test.js:342:13
 ❯ Test.assert node_modules/supertest/lib/test.js:195:23
 ❯ localAssert node_modules/supertest/lib/test.js:138:14
 ❯ Server.<anonymous> node_modules/supertest/lib/test.js:152:11

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[34/39]⎯


 Test Files  12 failed | 2 passed (14)
      Tests  31 failed | 49 passed (80)
   Start at  19:35:44
   Duration  12.56s (transform 588ms, setup 5.81s, collect 2.52s, tests 10.01s, environment 9.84s, prepare 1.24s)