I want to refactor my data fetching logic to use the TMDB Discover API for both Movies and TV Shows, replacing the category-specific endpoints like /movie/upcoming, /movie/now_playing, /movie/popular, /trending/all/week, and /tv/popular. The goal is to create unified, reusable API functions or hooks that dynamically build query parameters based on category (Upcoming, Trending, Now Playing, Popular, or Top Rated) for both Movies (/discover/movie) and TV Shows (/discover/tv).

For Movies:

Upcoming → primary_release_date.gte = today, sort_by=primary_release_date.asc, with_release_type=2|3 (theatrical only).

Now Playing → primary_release_date.lte = today, primary_release_date.gte = today minus 30 days, with_release_type=2|3, sort_by=release_date.desc.

Popular → sort_by=popularity.desc, with_release_type=2|3.

Trending → sort_by=popularity.desc or vote_average.desc, include vote_count.gte=1000 to ensure trending results.

Top Rated → sort_by=vote_average.desc, include vote_count.gte=500.

For TV Shows (using /discover/tv endpoint):

Airing Today / On Air → use air_date.gte = today and air_date.lte = today + 7 days to get currently airing shows.

Popular → sort_by=popularity.desc.

Top Rated → sort_by=vote_average.desc, with vote_count.gte=200.

Trending → sort_by=popularity.desc, optionally filter by first_air_date.gte within the last year to highlight recent trending content.

All queries should include shared parameters like language=en-US, region=IN, include_adult=false, and include_null_first_air_dates=false for TV. Each request should use a Bearer token for authorization.

The implementation should provide reusable TypeScript-based utility functions or React Query hooks such as useDiscoverMovies(category) and useDiscoverTvShows(category) that automatically select the correct endpoint and parameters based on category.

Each function should return a standardized, typed response structure compatible with the app’s components, and support pagination via page parameter. The code should be modular, clean, and optimized for scalability and maintainability.