Create a single, self-contained implementation task for adding profile-picture upload to the Cinehub React app: “Add a secure profile picture upload feature so users can set/update their avatar — the frontend (React + existing Tailwind UI) should include a reusable `ProfileAvatar` component with drag-and-drop and file-picker, client-side validation (type: jpg/png/webp, max 5MB), preview, image crop/resize to a square (min 200×200) and progress UI; when uploading, request a short-lived signed upload URL from the backend and upload the file directly to Cloudinary (or optionally route via backend if signed upload not possible). The backend (match existing stack: Node/Express or Spring Boot—implement one) must expose two endpoints: `GET /api/users/:id/avatar-upload-signature` that returns a Cloudinary upload signature (or an upload URL) after verifying the authenticated user owns `:id`, and `PUT /api/users/:id/avatar` which accepts the final Cloudinary public_id / secure_url and saves it to the `users` table in Postgres. Add a new DB column `avatar_url VARCHAR`, plus `avatar_public_id VARCHAR` (nullable) and a migration script to update existing users; ensure transactions so DB only updates after successful Cloudinary upload. Implement server-side validation (file size/type via signed upload or verify Cloudinary response), and an endpoint to delete/replace the old image (which also deletes the old asset from Cloudinary using stored `public_id`). Secure everything with existing auth (JWT/session) and rate-limit avatar operations. On the frontend, after successful upload update the user context/state and invalidate any cached user profile requests; show fallback initials avatar while empty. Add unit tests for backend endpoints and integration/e2e test for upload flow, plus a short README section documenting required env vars (`CLOUDINARY_CLOUD_NAME`, `CLOUDINARY_API_KEY`, `CLOUDINARY_API_SECRET`), example curl/Postman calls, and acceptance criteria: upload + preview works, image stored in Cloudinary, DB updated with `avatar_url`, old avatar is deleted on replace, unauthorized users can’t modify other users’ avatars, and performance/UX gracefully handles failures. Deliverables: frontend component(s), backend endpoints, DB migration SQL, tests, and brief deployment notes.”
