> Add a comprehensive, user-friendly filtering UI that exposes **every supported TMDB Discover filter** for both **Movies** (`/discover/movie`) and **TV Shows** (`/discover/tv`) so users can compose powerful queries without writing URLs. The UI must present appropriate controls for each filter (dropdowns for `language`, `region`, `certification_country`; multi-select chips or autocomplete for `with_genres`, `without_genres`, `with_keywords`, `with_companies`, `with_cast`, `with_crew`, `with_people`, `with_networks`; numeric range sliders/inputs for `vote_count.gte`, `vote_count.lte`, `vote_average.gte`, `vote_average.lte`; date pickers for `primary_release_date.gte`, `primary_release_date.lte`, `release_date.gte`, `release_date.lte`, `first_air_date.gte`, `first_air_date.lte`, `air_date.gte`, `air_date.lte`; radio or segmented control for `sort_by`; toggles for boolean flags like `include_adult`, `include_video`, `include_null_first_air_dates`; input for `page` and `year`; and a multi-select/pipe-or/comma-and toggle to let the user choose OR (`|`) vs AND (`,`) semantics where supported). Provide sensible defaults (`language=en-US`, `region=IN`, `include_adult=false`) and presets (Upcoming, Now Playing, Popular, Trending, Top Rated) which populate the controls with example parameter sets (e.g., Upcoming â†’ `primary_release_date.gte=today`, `sort_by=primary_release_date.asc`, `with_release_type=2|3`). The UI should validate inputs, show human-friendly labels (map genre/network/company/person IDs to names via cached lookups), and display the generated TMDB query string and a copy button for developers. Implement live-preview and debounce network calls, integrate with TypeScript types and React Query hooks (`useDiscoverMovies(filters)` / `useDiscoverTvShows(filters)`), sync filter state to URL (so filters are shareable/bookmarkable), support saving/loading filter presets, handle pagination and rate-limit/backoff gracefully, and include accessibility, keyboard navigation, and responsive layouts for desktop and mobile. Ensure secure use of the Bearer token in requests, and include examples in the UI help section (e.g., Upcoming Movies example and Top Rated TV example) so users understand how filters combine. Provide unit tests for the parameter builder utilities and end-to-end tests for the UI flows.
