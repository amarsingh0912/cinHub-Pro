name: Deploy to EC2

on:
  push:
    branches: [main, production]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run check
        continue-on-error: true

      - name: Run tests
        run: npm test
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          SESSION_SECRET: test-secret
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
          TMDB_ACCESS_TOKEN: ${{ secrets.TMDB_ACCESS_TOKEN }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Create deployment package
        run: |
          tar -czf deploy.tar.gz \
            dist/ \
            package.json \
            package-lock.json \
            drizzle.config.ts \
            shared/ \
            server/services/ \
            server/utils/

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deploy.tar.gz
          retention-days: 1

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

      - name: Transfer deployment package
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USERNAME }}
        run: |
          scp -i ~/.ssh/deploy_key deploy.tar.gz $EC2_USER@$EC2_HOST:/tmp/

      - name: Deploy on EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USERNAME }}
          APP_DIR: ${{ secrets.EC2_APP_DIR || '/var/www/cinehub-pro' }}
        run: |
          ssh -i ~/.ssh/deploy_key $EC2_USER@$EC2_HOST << 'ENDSSH'
            set -e
            
            APP_DIR="${{ secrets.EC2_APP_DIR || '/var/www/cinehub-pro' }}"
            
            # Navigate to app directory
            cd $APP_DIR
            
            # Create backup of current version
            if [ -d "dist" ]; then
              echo "Creating backup..."
              rm -rf dist.backup
              cp -r dist dist.backup
              echo "Backup created"
            fi
            
            # Extract new version
            echo "Extracting deployment package..."
            tar -xzf /tmp/deploy.tar.gz
            
            # Install production dependencies
            echo "Installing dependencies..."
            npm ci --production --ignore-scripts
            
            # Run database migrations
            echo "Running database migrations..."
            npm run db:push || echo "Migration completed with warnings"
            
            # Restart application using PM2
            echo "Restarting application..."
            pm2 restart cinehub-pro || pm2 start npm --name "cinehub-pro" -- start
            
            # Save PM2 configuration
            pm2 save
            
            # Clean up
            rm /tmp/deploy.tar.gz
            
            echo "Deployment completed successfully"
          ENDSSH

      - name: Health check
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "Waiting for application to start..."
          sleep 15
          
          echo "Performing health check..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://$EC2_HOST/api/health || echo "000")
          
          if [ "$RESPONSE" = "200" ]; then
            echo "✅ Health check passed - Application is running"
          else
            echo "⚠️  Health check returned: $RESPONSE"
            echo "Application may still be starting..."
          fi

      - name: Cleanup SSH
        if: always()
        run: rm -f ~/.ssh/deploy_key

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: Deployment Success
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 Deployment successful!"
          echo "Application deployed to: ${{ secrets.EC2_HOST }}"

      - name: Deployment Failed
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "Please check the logs and try again."
          exit 1
